// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// GetAllInstallsInstallsInstall includes the requested fields of the GraphQL type Install.
type GetAllInstallsInstallsInstall struct {
	ID       uuid.UUID `json:"ID"`
	Nicename string    `json:"nicename"`
	Username string    `json:"username"`
	Hostname string    `json:"hostname"`
	Port     int       `json:"port"`
}

// GetID returns GetAllInstallsInstallsInstall.ID, and is useful for accessing the field via an interface.
func (v *GetAllInstallsInstallsInstall) GetID() uuid.UUID { return v.ID }

// GetNicename returns GetAllInstallsInstallsInstall.Nicename, and is useful for accessing the field via an interface.
func (v *GetAllInstallsInstallsInstall) GetNicename() string { return v.Nicename }

// GetUsername returns GetAllInstallsInstallsInstall.Username, and is useful for accessing the field via an interface.
func (v *GetAllInstallsInstallsInstall) GetUsername() string { return v.Username }

// GetHostname returns GetAllInstallsInstallsInstall.Hostname, and is useful for accessing the field via an interface.
func (v *GetAllInstallsInstallsInstall) GetHostname() string { return v.Hostname }

// GetPort returns GetAllInstallsInstallsInstall.Port, and is useful for accessing the field via an interface.
func (v *GetAllInstallsInstallsInstall) GetPort() int { return v.Port }

// GetAllInstallsResponse is returned by GetAllInstalls on success.
type GetAllInstallsResponse struct {
	Installs []GetAllInstallsInstallsInstall `json:"installs"`
}

// GetInstalls returns GetAllInstallsResponse.Installs, and is useful for accessing the field via an interface.
func (v *GetAllInstallsResponse) GetInstalls() []GetAllInstallsInstallsInstall { return v.Installs }

func GetAllInstalls(
	ctx context.Context,
	client graphql.Client,
) (*GetAllInstallsResponse, map[string]interface{}, error) {
	req := &graphql.Request{
		OpName: "GetAllInstalls",
		Query: `
query GetAllInstalls {
	installs {
		ID
		nicename
		username
		hostname
		port
	}
}
`,
	}
	var err error

	var data GetAllInstallsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, resp.Extensions, err
}
